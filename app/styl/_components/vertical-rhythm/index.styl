// Warning text for when an integer is not used in rhythm functions
$not-integer-txt  = ' value breaks vertical rhythm. Use an interger (whole number) for $lines.';

//==============================================================================
// Helper function(s)
//==============================================================================
// Check if value is an integer and returns true or false
is-int($number)
  if $number is a'unit' and floor(abs($number)) == abs($number)
    true
  else
    (error '' + $number + ' must be a unit!')


// Returns an EM value. For example 24px becomes 1.5em
emCalc($target, $context = $base-font-size)
  remove-unit(($target / $context)) + 0em

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
emRhythm($lines = $base-vertical-unit, $font-size = $base-em-font-size)
  if is-int($lines) == false
    warn($lines + $not-integer-txt)
  else
    (remove-unit($lines) * remove-unit($base-vertical-unit)) / (remove-unit($font-size) * remove-unit($base-font-size)) + 0em

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
unitlessRhythm($lines = $base-line-multi, $font-size = $base-em-font-size)
  if is-int($lines) == false
    warn($lines + $not-integer-txt)
  else
    ($lines * remove-unit($base-vertical-unit)) / (remove-unit($font-size) * remove-unit($base-font-size))



//==============================================================================
// Mixin(s)
//==============================================================================
// Finally, the tools that you can use throughout your project to set
// all the wonderful type related stuffs.
// Sets the type in EMs and makes a vertical rhythm unitless line-height that is
// based on context.
setType($lines = $base-line-multi, $font-size = $base-em-font-size)
  font-size   : $font-size;
  line-height : unitlessRhythm($lines, $font-size);

// Creates a vertical rhythm unitless line-height that is based on context
setLeading($lines = $base-line-multi, $font-size = $base-em-font-size)
  line-height : unitlessRhythm($lines, $font-size);

// Creates a pixel width border top with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
rhythmBorderTop($border-width = 1px, $lines = $base-line-multi, $font-size = $base-em-font-size)
  border-top-width : $border-width;
  padding-top      : ((($lines * remove-unit($base-vertical-unit)) - remove-unit($border-width)) / (remove-unit($font-size) * remove-unit($base-font-size)) + 0em);

// Creates a pixel width border bottom with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
rhythmBorderBottom($border-width = 1px, $lines = $base-line-multi, $font-size = $base-em-font-size)
  border-bottom-width : $border-width;
  padding-bottom      : ((($lines * remove-unit($base-vertical-unit)) - remove-unit($border-width)) / (remove-unit($font-size) * remove-unit($base-font-size)) + 0em)

// Creates a pixel width border with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
rhythmBorder($border-width = 1px, $lines = $base-line-multi, $font-size = $base-em-font-size)
  border-width : $border-width;
  padding      : ((($lines * remove-unit($base-vertical-unit)) - remove-unit($border-width)) / (remove-unit($font-size) * remove-unit($base-font-size)) + 0em);

// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { debug-vertical-alignment(); } and add class va-debug to the body tag
debug-vertical-alignment($opacity = 0.8, $vertical-unit = $base-vertical-unit, $type-base-line-multi = $base-line-multi, $type-size = $base-em-font-size)
  position : relative;
  &:before, &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    display: none;
  }
  &:before {
    z-index: 10;
    background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);
  }
  &:after {
    z-index: 9;
    background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% $vertical-unit;
  }
  &.va-debug:before, &.va-debug:after {
    display: block;
    pointer-events: none;
  }
